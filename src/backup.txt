async function wcWishlistButtonProcess(selector, type, variantId) {
  const wishlistItems = [...document.querySelectorAll(selector)].filter(
    el => !el.querySelector(".wc_wishlistBlock")
  );
  if (!wishlistItems.length) return;
  const productIds = [...new Set(wishlistItems.map(el => el.getAttribute("data-product_id")))];
  if (!productIds.length) return;
  if (typeof wc_wishlistProductIds == "undefined") {
    console.error("wc_wishlistProductIds is not defined");
    return;
  }
  try {
    console.log("productIds.length", __st?.p);

    if (!cachedProductData && !isFetchingData) {
      isFetchingData = true;
      try {
        cachedProductData = await wcGetBackInStockData(productIds);
      } catch (err) {
        console.error("Error fetching wishlist products:", err);
      } finally {
        isFetchingData = false;
      }
    }
    let localdata = JSON.parse(localStorage.getItem("wishlistClubProducts"))
    const allIncluded = productIds?.every(id =>
      localdata?.some(product => product?.shopify_product_id.toString() == id)
    );

    console.log("allIncluded", allIncluded); // true ✅
    console.log("allIncluded", productIds); // true ✅
    console.log("allIncluded", localdata); // true ✅

    if (!cachedWishlistProductsData && !isFetchingData) {
      if (allIncluded == false) {
        isFetchingData = true;
        try {
          cachedWishlistProductsData = await wcGetWishlistProducts(productIds);
        } catch (err) {
          console.error("Error fetching wishlist products:", err);
        } finally {
          isFetchingData = false;
        }
      }
    }


    if (Number(wcSetting?.general?.app_enable) !== 1) return;
    wishlistItems.forEach((el) => {
      const pId = el.getAttribute("data-product_id");
      const vId = variantId ?? el.getAttribute("data-variant_id");
      let findWishlist = null;
      if (Number(wcSetting?.general?.is_variant_wishlist) === 0) {
        findWishlist = cachedWishlistProductsData?.find(
          item => String(item.shopify_product_id) === String(pId) ||
            String(item.shopify_variant_id) === String(vId)
        );
      } else {
        findWishlist = (wishlistProducts() || []).find(
          item => Number(item.shopify_product_id) === Number(pId) &&
            Number(item.shopify_variant_id) === Number(vId)
        ) || (wishlistProducts() || []).find(
          item => Number(item.shopify_product_id) === Number(pId)
        );
        if (findWishlist) {
          findWishlist = { ...findWishlist, wishlisted: false };
        }
      }

      if (!roots.has(el)) {
        const root = createRoot(el);
        roots.set(el, root);
        console.log("~~~~~~~~~~~~~~~~root", type, cachedProductData);
        root.render(
          type === "backinstock"
            ? <Backinstock ProductId={pId} VariantId={vId} type={type} data={cachedProductData} />
            : <WishlistWidget ProductId={pId} VariantId={vId} type={type} data={findWishlist ?? null} cachedProductData={cachedProductData['products']} />
        );
      } else {
        if (roots.has(el) && el.classList.contains("th_prd_wl_btn")) {
          let findWishlist = (wishlistProducts() || []).find(
            item => Number(item.shopify_variant_id) === Number(vId)
          )
          console.log("~~~~~~~~~~~~~~~~DONE~~~~~~~~~~~~~~~");
          if (findWishlist !== undefined) {
            findWishlist = { ...findWishlist, wishlisted: true };
          } else {
            findWishlist = { ...findWishlist, wishlisted: !true };
          }

          roots.get(el).render(
            <WishlistWidget ProductId={el.getAttribute("data-product_id")} VariantId={vId} type={"product"} data={findWishlist ?? null} cachedProductData={cachedProductData['products']} />
          );
        }
        if (roots.has(el) && el.classList.contains("wc_wl_bis_btn")) {
          console.log("~~~~~~~~~~~~~~~~DONE");
          roots.get(el).render(
            <Backinstock ProductId={pId} VariantId={vId} type={"backinstock"} data={cachedProductData} />
          );
        }
      }
      if (!wc_wishlistProductIds.includes(pId)) {
        wc_wishlistProductIds.push(pId);
      }
    });

  } catch (error) {
    console.error("Error processing wishlist button:", error);
    isFetchingData = false;
  }
}